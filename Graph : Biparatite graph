#include<bits/stdc++.h>
using namespace std;
class graph
{
    map<int,list<int> > m;
public:
    graph()
    {

    }
    void addedge(int u,int v)
    {
        m[u].push_back(v);
        m[v].push_back(u);
    }
    bool isbiparatite(int s)
    {
        queue<int> q;
        map<int,int> col;
        map<int,list<int> > :: iterator i;
        for(i=m.begin();i!=m.end();i++)
        {
            int cur=i->first;
            col[cur]=-1;
        }
        col[s]=0;
        q.push(s);
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            list<int> :: iterator j;
            for(j=m[node].begin();j!=m[node].end();j++)
            {
                if(col[*j]==-1)
                {
                    col[*j]=1-col[node];
                    q.push(*j);
                }
                if(col[*j]==col[node])
                    return false;
            }
        }
        return true;
    }
};
int main(void)
{
    graph g;
    g.addedge(1,2);
    g.addedge(2,3);
    g.addedge(3,4);
    g.addedge(4,1);
    g.addedge(1,3);
    if(g.isbiparatite(1))
        cout<<"Yes";
    else
        cout<<"NO";
}
