#include<bits/stdc++.h>
using namespace std;
class graph{
map<int,list<int> > m;
public:
    void addedge(int u,int v,bool bidir=true)
    {
        m[u].push_back(v);
        if(bidir)
            m[v].push_back(u);
    }
    void bfs(int x)
    {
        queue<int> q;
        map<int,int> dis;
        map<int,int> par;
        map<int,list <int> > :: iterator i;//we could have done
        for(i=m.begin();i!=m.end();i++)//for(auto i: m)
        {
            dis[i->first]=INT_MAX;
        }
        q.push(x);
        dis[x]=0;
        par[x]=x;
        while(!q.empty())
        {
            int node=q.front();
            cout<<node<<" ";
            q.pop();
            list<int> :: iterator j;//we could have done
            for(j=m[node].begin();j!=m[node].end();j++)//for(auto j:m[node])
            {
              if(dis[*j]==INT_MAX)
              {
                q.push(*j);
                dis[*j]=dis[node]+1;
                par[*j]=node;
              }
            }
        }
        //printing all these nodes
        cout<<endl;
        map<int,list<int> > ::iterator k;//we could have done
        for(k=m.begin();k!=m.end();k++)//for(auto k: m)
        {
            int res=k->first;
            cout<<"Dist of "<<res<<" from "<<x<<" is "<<dis[res]<<endl;
        }
    }
};
int main(void)
{
    graph g;
    g.addedge(0,1);
    g.addedge(1,2);
    g.addedge(0,4);
    g.addedge(2,4);
    g.addedge(2,3);
    g.addedge(3,5);
    g.addedge(3,4);
    g.bfs(0);
}
